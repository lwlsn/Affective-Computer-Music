---- response modelling dependencies ----
import System.Random
import Data.Traversable
import Numeric

g <- getStdGen

---- Markov Chain dependencies ----

import Data.List
import Data.Maybe

---- Markov Functions ----

markovStep :: [[Double]] -> [Int] -> [Int]
markovStep tp xs = (fromJust $ findIndex (r <=) $ scanl1 (+) (tp!!(head xs))) : xs
  where r = timeToRand $ fromIntegral $ length xs
markovPat :: Int -> Int -> [[Double]] -> Pattern Int
markovPat n xi tp = slow (fromIntegral n) $ listToPat
  $ reverse $ (iterate (markovStep tp) [xi]) !! (n-1)


---- Generate random valence/arousal pairs ---

let va = take 10 (randoms g :: [Float])

--  convert to variables and scale to [-1,1]
--  change this to a for-style loop to fill an array? how to in haskell??
let v1 = (va!!0)*2-1
    a1 = (va!!1)*2-1
    v2 = (va!!2)*2-1
    a2 = (va!!3)*2-1
    v3 = (va!!4)*2-1
    a3 = (va!!5)*2-1
    v4 = (va!!6)*2-1
    a4 = (va!!7)*2-1
    v5 = (va!!8)*2-1
    a5 = (va!!9)*2-1

-- modality changes based on v from input
modeFunc :: (RealFrac a2, Data.String.IsString a1) => a2 -> a1
modes = ["lydian", "ionian", "mixolydian","dorian", "aeolian","phrygian", "locrian"]
modeFunc v =  modes!!((round ((-3*v)+3)))


-- implementation
d1 $ s "supersquare*4"
 #note (scale (modeFunc v1) $ irand 12) --- how will irand affect this? want more of a weighted - notes inter-dependent ? e.g. markov?


--- tempo changes based on v-a from input
tempoFunc :: Num a => a -> a -> a -> a -> a -> a
tempoFunc v a t0 t1 t2 = t0 + (t1*a) + (t2*v)

t = fromInteger (round(tempoFunc (v2) (a2) 120 45 15))

--- implementation
setcps (t/120/2)

d1
$ stack
[ s "[k*4]",
every 2 (const $ s "sn(5,8,<0 1 2>)")
$ s "sn*4"
]

---- loudness changes  ----
loudnessFunc :: Num a => a -> a -> a -> a -> a -> [a]
loudnessFunc v a l0 l1 l2 = [l0 + (l1*a)+(l2*v)]

l = listToPat ((loudnessFunc v2 a2 1 0.2 0.3) )

:t l

d1 $ s "bd*4" # gain (l) -- same problem here??

d1 $ s "bd*4" #gain ((loudnessFunc v2 a2 1 0.2 0.3))

--- pitch register --- combine this with the mode changes
pitchFunc :: Float -> Float
pitchFunc v = if (v >= 0.5) then ((2*(v-0.5)))
              else (if (v <0.5) then (2*v) else v)

pitchFunc v
  | v >= 0.5 = (2*(v-0.5))
  | (v < 0.5 && v >= 0) = (2*v)
  |  (v < 0 &&  v >= (-0.5)) =
  | otherwise = v

:t pitchFunc

pitchFunc v1

---- even newer function, using euclidean algorithm


pick :: [a] -> IO a
pick xs = fmap (xs !!) $ randomRIO (0, length xs - 1)


rhythmicFunc :: (Ord a1, Ord a2, Num a1, Num a2, Num a3) => a1 -> a2 -> [[a3]]
rhythmicFunc v a
  | (v > 0 && a < 0 ) =  [[2,4],[2,8],[4,4],[4,8]]
                        --   fmap (xs !!) $ randomRIO (0, length xs - 1)
  -- | (v > 0 && a > 0 ) = [(1/4),(1/4), (1/2)] -- +ve v, +ve a
  -- | (v < 0 && a < 0 ) = [(1/2), (1/4), (1/4)] -- -ve v, -ve a
  -- | (v < 0 && a > 0) = [(1/4), (3/4), (3/4),(1/4)] -- -ve v, +ve a
  -- | otherwise = error "inputs not in valid range"

r = rhythmicFunc 0.44 (-0.44)

r1 = pick r

head (r1!!0)

head (tail (r!!0))

d1 $ euclid 3 8 $ s "cp"


d1 $ struct (ascii "<[a b] [c d] [e f] [g h]>") $ sound "bd" # speed 2


---- rhythmic density  (new v using guards, could it be a cts function somehow??) ----
rhythmicFunc :: (Num a1, Num a2, Ord a1, Ord a2, Fractional a3) =>
     a1 -> a2 -> [a3]
rhythmicFunc v a
  | (v > 0 && a < 0 ) = ([(1/2),(1/2),(1/2),(1/2)]) -- +ve v -ve a
  | (v > 0 && a > 0 ) = [(1/4),(1/4), (1/2)] -- +ve v, +ve a
  | (v < 0 && a < 0 ) = [(1/2), (1/4), (1/4)] -- -ve v, -ve a
  | (v < 0 && a > 0) = [(1/4), (3/4), (3/4),(1/4)] -- -ve v, +ve a
  | otherwise = error "inputs not valid"

:t rhythmicFunc

r = rhythmicFunc (-0.75) (0.75)

r1 = take 2 (r)
r2 = drop 2 (r)

d1 $ fast 8
  $ gain (fmap ([0,1]!!)
  $ markovPat 64 0 [r1, r2])
  # s "<bd sn>"


---- rhythmic density  (old v) ----

rhythmicFunc' :: (Ord a1, Ord a2, Fractional a1, Fractional a2) =>  a1 -> a2 -> [Char]
rhythmicFunc' v a = if (v >= 0.5 &&  a>= 0.5) then (gP)
                  else (if ((v >= 0 && v < 0.5 ) && (a >= 0 && a < 0.5)) then " 1 [~ 1 ] 1 [~ 1]"
                  else "Bing" )


convertToPattern :: [a] -> [a]
convertToPattern st = [ c | c <- st]

r = convertToPattern (rhythmicFunc 0.75 0.75)

:t r

(if ((v >= -0.5 && v < 0 ) && (a >= -0.5 && a < 0)) then "1 [~ ~] 1 [~ ~]" ) else "Bing"
-- using function syntax for this??

r = rhythmicFunc v3 (a1*3)


d1 $ gain (r) # s "sn" -- why?


hush
