import Data.List
import Data.Maybe


markovStep :: [[Double]] -> [Int] -> [Int]
markovStep tp xs = (fromJust $ findIndex (r <=) $ scanl1 (+) (tp!!(head xs))) : xs
  where r = timeToRand $ fromIntegral $ length xs


markovPat :: Int -> Int -> [[Double]] -> Pattern Int
markovPat n xi tp = slow (fromIntegral n) $ listToPat
  $ reverse $ (iterate (markovStep tp) [xi]) !! (n-1)



do
  d1 $ struct "t(5,8)" $Â s "cp"
    # gain (fmap ([1,0 , 0.75]!!)
      $ markovPat 64 0 [[0.25, 0.5, 0.25], [0.3, 0.4, 0.3], [0.25, 0.75, 0.25]])





resetCycles
